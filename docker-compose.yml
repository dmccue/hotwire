# Important: For Ubuntu 18.04 please run 'ln -sf /run/systemd/resolve/resolv.conf /etc/resolv.conf' to enable DNS resolution for container services
# add 'nameserver 127.0.0.53' to /etc/resolv.conf

version: "3"
services:

  ubuntutest:
    build: ./app-ubuntutest
    image: ubuntutest
    entrypoint: bash -c
    command: exit 0
    networks:
      - backend


  httpd:
    build: ./app-httpd
    restart: always
    ports:
      - "80/tcp"
    volumes:
      - ./app-httpd/htdocs:/usr/local/apache2/htdocs
    dns:
      - 172.21.1.1
    networks:
      - backend
    healthcheck:
      test: nc -z localhost 80 && curl -f http://localhost 2>&1 >/dev/null
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.whoami.rule=Host(`${FQDN}`)"
      - "traefik.http.routers.whoami.entrypoints=web"

  wireguard:
    build: ./app-wireguard
    restart: always
    ports:
      - "51820:51820/udp"
    dns:
      - 172.21.1.1
    volumes:
      - /data/wireguard:/etc/wireguard
      - /var/lib/dkms/wireguard:/var/lib/dkms/wireguard
      - /usr/src:/usr/src:ro
      - /lib/modules:/lib/modules
    cap_add:
      - NET_ADMIN
      - SYS_MODULE
    networks:
      - backend
    healthcheck:
      test: wg show | grep listening


  pihole:
    #image: pihole/pihole
    build: ./app-pihole
    restart: always
    #dns:
      #- 127.0.0.11
    ports:
      - "53/udp"
      #- "53:53/udp" #This breaks docker resolution
      #- "80/tcp"
      #- "443/tcp"
    volumes:
      - /etc/timezone:/etc/timezone:ro
      #- /data/app-pihole/etc-dnsmasq.d:/etc/dnsmasq.d
      #- /data/app-pihole/etc-pihole:/etc/pihole
    environment:
      ServerIP: 172.21.1.1
      TZ: Europe/London
      DNSMASQ_LISTENING: local
      IPv6: 'False'
      DNSSEC: 'True'
      DNS1: 1.1.1.2
      DNS2: 1.0.0.2
      WEBPASSWORD: PiHole123
      DNS_BOGUS_PRIV: 'True'
      CONDITIONAL_FORWARDING: 'True'
      CONDITIONAL_FORWARDING_IP: 172.21.0.1
      CONDITIONAL_FORWARDING_DOMAIN: 'localdomain'
      CONDITIONAL_FORWARDING_REVERSE: '0.21.172.in-addr.arpa'
    networks:
      backend:
        ipv4_address: 172.21.1.1
    healthcheck:
      test: nc -z localhost 80 && curl -f http://localhost 2>&1 >/dev/null && nc -z localhost 53 && nc -zu localhost 53

  traefik:
    image: "traefik:latest"
    restart: always
    container_name: "traefik"
    command:
      - "--log.level=DEBUG" # can comment this out
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
    ports:
      - "80:80"
      - "8080:8080"
    networks:
      - backend
      - default
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"

  portainer:
    image: portainer/portainer
    restart: always
    command: -H unix:///var/run/docker.sock
    ports:
      - "9000:9000/tcp"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /data/portainer/data:/data
      - /data/shared:/shared
    environment:
      - TZ=Europe/London
    healthcheck:
      test: curl http://localhost:9000
    networks:
      - backend
# docker container create --name="portainer" \
#    --volume /opt/docker/volumes/portainer/data:/data \
#    --volume /var/run/docker.sock:/var/run/docker.sock \
#    --publish 9000:9000 \
#    --restart=always \
#    portainer/portainer

networks:
  backend:
    ipam:
      config:
      - subnet: 172.21.0.0/16
